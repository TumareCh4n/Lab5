import java.util.*;
import java.io.*;

class HashST<Key, Value> {
    private HashMap<Key, Value> map;

    public HashST() {
        map = new HashMap<>();
    }

    public void put(Key key, Value value) {
        map.put(key, value);
    }

    public Value get(Key key) {
        return map.get(key);
    }

    public boolean contains(Key key) {
        return map.containsKey(key);
    }
}
class BST<Key extends Comparable<Key>, Value> {
    private TreeMap<Key, Value> tree;

    public BST() {
        tree = new TreeMap<>();
    }

    public void put(Key key, Value value) {
        tree.put(key, value);
    }

    public Value get(Key key) {
        return tree.get(key);
    }

    public void delete(Key key) {
        tree.remove(key);
    }

    public Iterable<Key> keysInRange(Key lo, Key hi) {
        return tree.subMap(lo, true, hi, true).keySet();
    }

    public Key successor(Key key) {
        SortedMap<Key, Value> tail = tree.tailMap(key, false);
        return tail.isEmpty() ? null : tail.firstKey();
    }
}


class Player{
    private String PlayerName;
    private int Wins;
    private int Draws;
    private int Losses;

    Player(String PlayerName) {
        this.PlayerName = PlayerName;
        this.Wins = 0;
        this.Draws = 0;
        this.Losses = 0;
    }

    public void SetPlayerName (String NewPlayerName) {
        PlayerName = NewPlayerName;
    }
    public void addWin () {
        Wins++;
    }
    public void addDraw () {
        Draws++;
    }
    public void addLoss () {
        Losses++;
    }

    public String GetPlayerName() {
        return PlayerName;
    }
    public int GetWins() {
        return Wins;
    }
    public int GetDraws() {
        return Draws;
    }
    public int GetLosses() {
        return Losses;
    }

    public float WinRate() {
        int SiNoPongoEstoSeBugeaLol = (Wins + Draws + Losses);
        if(SiNoPongoEstoSeBugeaLol == 0){
            return 0;
        }else {
            return (float)Wins/SiNoPongoEstoSeBugeaLol;
        }
    }

    public void PrintWeas() {
        System.out.println("PlayerName : " + PlayerName);
        System.out.println("Wins : " + Wins);
        System.out.println("Draws : " + Draws);
        System.out.println("Losses : " + Losses);
    }}; //Listoko

class Scoreboard {
    private BST<Integer, List<String>> WinTree;
    private HashST<String, Player> Players;
    private int PlayedGames;

    public Scoreboard() {
        WinTree = new BST<>();
        Players = new HashST<>();
        PlayedGames = 0;
    }

    public void AddGameResult(String WinnerPlayerName, String LooserPlayerName, boolean Draw) {
        if (!Players.contains(WinnerPlayerName) || !Players.contains(LooserPlayerName)) return;

        Player Winner = Players.get(WinnerPlayerName);
        Player Loser = Players.get(LooserPlayerName);

        int OldWinnerWins = Winner.GetWins();
        List<String> WinnerList = WinTree.get(OldWinnerWins);
        if (WinnerList != null) {
            WinnerList.remove(WinnerPlayerName);
            if (WinnerList.isEmpty()) {
                WinTree.delete(OldWinnerWins);
            } else {
                WinTree.put(OldWinnerWins, WinnerList);
            }
        }

        int OldLoserWins = Loser.GetWins();
        List<String> LoserList = WinTree.get(OldLoserWins);
        if (LoserList != null) {
            LoserList.remove(LooserPlayerName);
            if (LoserList.isEmpty()) {
                WinTree.delete(OldLoserWins);
            } else {
                WinTree.put(OldLoserWins, LoserList);
            }
        }

        if (Draw) {
            Winner.addDraw();
            Loser.addDraw();
        } else {
            Winner.addWin();
            Loser.addLoss();
        }

        int NewWinnerWins = Winner.GetWins();
        List<String> NewWinnerList = WinTree.get(NewWinnerWins);
        if (NewWinnerList == null) NewWinnerList = new ArrayList<>();
        NewWinnerList.add(WinnerPlayerName);
        WinTree.put(NewWinnerWins, NewWinnerList);

        int NewLoserWins = Loser.GetWins();
        List<String> NewLoserList = WinTree.get(NewLoserWins);
        if (NewLoserList == null) NewLoserList = new ArrayList<>();
        NewLoserList.add(LooserPlayerName);
        WinTree.put(NewLoserWins, NewLoserList);

        PlayedGames++;
    }

     public void RegisterPlayer(String PlayerName) {
        if (!Players.contains(PlayerName)) {
            Player NewPlayer = new Player(PlayerName);
            Players.put(PlayerName, NewPlayer);

            List<String> Names = WinTree.get(0);
            if (Names == null) Names = new ArrayList<>();
            Names.add(PlayerName);
            WinTree.put(0, Names);
        }
    }

    public boolean CheckPlayer(String PlayerName) {
        return Players.contains(PlayerName);
    }

     public Player[] WinRange(int Lo, int Hi) {
        List<Player> Result = new ArrayList<>();

        for (int Key : WinTree.keysInRange(Lo, Hi)) {
            List<String> Names = WinTree.get(Key);
            if (Names != null) {
                for (String Name : Names) {
                    Player P = Players.get(Name);
                    if (P != null) Result.add(P);
                }
            }
        }

        return Result.toArray(new Player[0]);
    }

     public Player[] WinSuccesor(int Wins) {
        Integer NextKey = WinTree.successor(Wins);
        if (NextKey == null) return new Player[0];

        List<String> Names = WinTree.get(NextKey);
        List<Player> Result = new ArrayList<>();

        if (Names != null) {
            for (String Name : Names) {
                Player P = Players.get(Name);
                if (P != null) Result.add(P);
            }
        }

        return Result.toArray(new Player[0]);
    }

} //listo

class ConnectFour {
    private char[][] Grid = new char[6][7]; // 6 filas x 7 columnas
    private char CurrentSymbol;

    public ConnectFour(char CurrentSymbol) {
        this.CurrentSymbol = CurrentSymbol;
        for (int i = 0; i < 6; i++) {
            Arrays.fill(Grid[i], ' ');
        }
    }

    public char getCurrentSymbol() {
        return CurrentSymbol;
    }

    public char[][] getGrid() {
        return Grid;
    }

    public boolean MakeMove(int col) {
        if (col < 0 || col >= 7) {
            return false;
        }

        for (int row = 5; row >= 0; row--) {
            if (Grid[row][col] == ' ') {
                Grid[row][col] = CurrentSymbol;
                CurrentSymbol = (CurrentSymbol == 'X') ? 'O' : 'X';
                return true;
            }
        }
        return false;
    }

    public int isGameOver() {
        for (int r = 0; r < 6; r++) {
            for (int c = 0; c < 7; c++) {
                char curr = Grid[r][c];
                if (curr == ' ') continue;

                // Horizontal
                if (c <= 3 && curr == Grid[r][c+1] && curr == Grid[r][c+2] && curr == Grid[r][c+3])
                    return (curr == 'X') ? 1 : 2;

                // Vertical
                if (r <= 2 && curr == Grid[r+1][c] && curr == Grid[r+2][c] && curr == Grid[r+3][c])
                    return (curr == 'X') ? 1 : 2;

                // Diagonal ↘
                if (r <= 2 && c <= 3 && curr == Grid[r+1][c+1] && curr == Grid[r+2][c+2] && curr == Grid[r+3][c+3])
                    return (curr == 'X') ? 1 : 2;

                // Diagonal ↙
                if (r <= 2 && c >= 3 && curr == Grid[r+1][c-1] && curr == Grid[r+2][c-2] && curr == Grid[r+3][c-3])
                    return (curr == 'X') ? 1 : 2;
            }
        }

        boolean full = true;
        for (int c = 0; c < 7; c++) {
            if (Grid[0][c] == ' ') full = false;
        }

        return full ? 3 : 0;
    }
}; // me parece que esta listo, aunque el constructor no me convence

class Game{
    private String Status;
    private String WinnerPlayerName;
    private String PlayerNameA;
    private String PlayerNameB;
    private ConnectFour ConnectFour;

    Game(String WinnerPlayerName,String PlayerNameA,String PlayerNameB,ConnectFour ConnectFour) {
        this.Status = "IN_PROGRESS";
        this.WinnerPlayerName = WinnerPlayerName;
        this.PlayerNameA = PlayerNameA;
        this.PlayerNameB = PlayerNameB;
        this.ConnectFour = ConnectFour;
    }

    public void SetStatus (String NewStatus) {
        Status = NewStatus;
    }
    public void SetWinnerPlayerName (String NewWinnerPlayerName) {
        WinnerPlayerName = NewWinnerPlayerName;
    }
    public void SetPlayerNameA (String NewPlayerNameA) {
        PlayerNameA = NewPlayerNameA;
    }
    public void SetPlayerNameB (String NewPlayerNameB) {
        PlayerNameB = NewPlayerNameB;
    }
    public void SetConnectFour (ConnectFour NewConnectFour) {
        ConnectFour = NewConnectFour;
    }

    public String GetStatus() {
        return Status;
    }
    public String GetWinnerPlayerName() {
        return WinnerPlayerName;
    }
    public String GetPlayerNameA() {
        return PlayerNameA;
    }
    public String GetPlayerNameB() {
        return PlayerNameB;
    }
    public ConnectFour GetConnectFour() {
        return ConnectFour;
    }
    
    
    
    public String play() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            printBoard();

            String currentPlayer = (ConnectFour.getCurrentSymbol() == 'X') ? PlayerNameA : PlayerNameB;
            System.out.print("Turno de " + currentPlayer + " (" + ConnectFour.getCurrentSymbol() + ") - Ingrese columna (0-6): ");

            int column;
            try {
                column = scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("Entrada inválida. Debes ingresar un número entre 0 y 6.");
                scanner.next(); // limpiar buffer
                continue;
            }

            boolean valid = ConnectFour.MakeMove(column);
            if (!valid) {
                System.out.println("Movimiento inválido. Intenta de nuevo.");
                continue;
            }

            int result = ConnectFour.isGameOver();
            if (result == 1 || result == 2) {
                Status = "VICTORY";
                WinnerPlayerName = (result == 1) ? PlayerNameA : PlayerNameB;
                System.out.println("¡Victoria de " + WinnerPlayerName + "!");
                return WinnerPlayerName;
            } else if (result == 3) {
                Status = "DRAW";
                System.out.println("¡Empate!");
                return "";
            }
        }
    }




    private void printBoard() { //este es un metodo que deeeeveeriiiia imprimir de forma correcta el tablero
        System.out.println(" 0 1 2 3 4 5 6");
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 7; j++) {
                System.out.print("|" + ConnectFour.getGrid()[i][j]);
            }
            System.out.println("|");
        }
        System.out.println("-----------------");
    }
 

    public void PrintWeas() {
        System.out.println("Status : " + Status);
        System.out.println("WinnerPlayerName : " + WinnerPlayerName);
        System.out.println("PlayerNameA : " + PlayerNameA);
        System.out.println("PlayerNameB : " + PlayerNameB);
        System.out.println("ConnectFour : " + ConnectFour);
    }};//listo

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Scoreboard scoreboard = new Scoreboard();

        String opcion = "";

        System.out.println("=== Bienvenido ConnectFour ===");

        while (!opcion.equals("5")) {
            System.out.println("\n--- Menú Principal ---");
            System.out.println("1. Registrar jugador");
            System.out.println("2. Listar jugadores");
            System.out.println("3. Iniciar partida");
            System.out.println("4. Ver estadísticas de un jugador");
            System.out.println("5. Salir");
            System.out.print("Seleccione una opción: ");
            opcion = scanner.nextLine();

            switch (opcion) {
                case "1":
                    System.out.print("Ingrese nombre del jugador a registrar: ");
                    String nombreJugador = scanner.nextLine();
                    if (scoreboard.CheckPlayer(nombreJugador)) {
                        System.out.println("Jugador ya registrado.");
                    } else {
                        scoreboard.RegisterPlayer(nombreJugador);
                        System.out.println("Jugador registrado correctamente.");
                    }
                    break;

                case "2":
                    System.out.println("--- Jugadores registrados ---");
                    Player[] jugadores = scoreboard.WinRange(0, 1000);
                    for (Player p : jugadores) {
                        System.out.println("- " + p.GetPlayerName());
                    }
                    break;

                case "3":
                    System.out.print("Ingrese nombre del Jugador A: ");
                    String jugadorA = scanner.nextLine();
                    System.out.print("Ingrese nombre del Jugador B: ");
                    String jugadorB = scanner.nextLine();

                    if (!scoreboard.CheckPlayer(jugadorA) || !scoreboard.CheckPlayer(jugadorB)) {
                        System.out.println("Ambos jugadores deben estar registrados para iniciar una partida.");
                        break;
                    }

                    ConnectFour juego = new ConnectFour('X');
                    Game partida = new Game("", jugadorA, jugadorB, juego);
                    String ganador = partida.play();

                    if (!ganador.equals("")) {
                        String perdedor = (ganador.equals(jugadorA)) ? jugadorB : jugadorA;
                        scoreboard.AddGameResult(ganador, perdedor, false);
                    } else {
                        scoreboard.AddGameResult(jugadorA, jugadorB, true);
                    }
                    break;

                case "4":
                    System.out.print("Ingrese nombre del jugador: ");
String consultaJugador = scanner.nextLine();

Player[] jugadores2 = scoreboard.WinRange(0, 1000);
Player jugadorConsultado = null;

for (Player p : jugadores2) {
    if (p.GetPlayerName().equals(consultaJugador)) {
        jugadorConsultado = p;
        break;
    }
}

if (jugadorConsultado == null) {
    System.out.println("Jugador no encontrado.");
} else {
    jugadorConsultado.PrintWeas();
}

            }
        }

        scanner.close();
    }
}
